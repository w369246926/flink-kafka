import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class SimpleHttpClient {

    public static void main(String[] args) throws IOException {
        // Specify the URL of the server
        URL url = new URL("http://localhost:8080/hello");

        // Open a connection to the URL
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        // Set the request method to GET
        connection.setRequestMethod("GET");

        // Get the response code
        int responseCode = connection.getResponseCode();
        System.out.println("Response Code: " + responseCode);

        // Read the response from the server
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String line;
        StringBuilder response = new StringBuilder();

        while ((line = reader.readLine()) != null) {
            response.append(line);
        }
        reader.close();

        // Print the response
        System.out.println("Response from Server: " + response.toString());

        // Close the connection
        connection.disconnect();
    }


import javax.net.ssl.HttpsURLConnection;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;

public class SimpleHttpsClient {

    public static void main(String[] args) throws IOException {
        // Specify the URL of the server
        URL url = new URL("https://localhost:8443/hello");

        // Open a connection to the URL
        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();

        // Get the response code
        int responseCode = connection.getResponseCode();
        System.out.println("Response Code: " + responseCode);

        // Read the response from the server
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String line;
        StringBuilder response = new StringBuilder();

        while ((line = reader.readLine()) != null) {
            response.append(line);
        }
        reader.close();

        // Print the response
        System.out.println("Response from Server: " + response.toString());

        // Close the connection
        connection.disconnect();
    }
}

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.Channel;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.ssl.SslContext;
import io.netty.handler.ssl.SslContextBuilder;
import io.netty.handler.ssl.SslHandler;

import javax.net.ssl.SSLEngine;

public class NettyHttpsClient {

    public static void main(String[] args) throws Exception {
        // Specify the SSL keystore and password
        String keyStorePath = "path/to/your/keystore.jks";
        String keyStorePassword = "password";

        // Setup SSL context
        SslContext sslContext = SslContextBuilder.forClient().trustManager(new File(keyStorePath)).build();

        // Configure the client
        EventLoopGroup group = new NioEventLoopGroup();

        try {
            Bootstrap b = new Bootstrap();
            b.group(group)
             .channel(NioSocketChannel.class)
             .option(ChannelOption.SO_KEEPALIVE, true)
             .handler(new ChannelInitializer<SocketChannel>() {
                @Override
                protected void initChannel(SocketChannel ch) throws Exception {
                    SSLEngine engine = sslContext.newEngine(ch.alloc());
                    ch.pipeline().addLast(new SslHandler(engine));
                    ch.pipeline().addLast(new MyHandler());
                }
             });

            // Connect to the server
            Channel channel = b.connect("localhost", 8443).sync().channel();

            // Your client-side logic here

            // Close the connection
            channel.closeFuture().sync();
        } finally {
            group.shutdownGracefully();
        }
    }

    static class MyHandler extends io.netty.channel.ChannelInboundHandlerAdapter {
        // Your client-side handling logic here
    }
}
}